From 0b69e95aa702fb9f52b285360d5c5ae5e7fbb745 Mon Sep 17 00:00:00 2001
From: Dima Pasechnik <dima@pasechnik.info>
Date: Thu, 16 Mar 2023 22:35:09 +0000
Subject: [PATCH] rebased PR2946

---
 Cython/Compiler/Main.py                       | 44 +++++++++++++++----
 Cython/Utils.py                               | 22 +++++++---
 runtests.py                                   |  1 +
 .../build/cythonize_pep420_namespace.srctree  | 44 +++++++++++++++++++
 4 files changed, 96 insertions(+), 15 deletions(-)
 create mode 100644 tests/build/cythonize_pep420_namespace.srctree

diff --git a/Cython/Compiler/Main.py b/Cython/Compiler/Main.py
index 9c57452ba..1143ecf03 100644
--- a/Cython/Compiler/Main.py
+++ b/Cython/Compiler/Main.py
@@ -809,32 +809,58 @@ def search_include_directories(dirs, qualified_name, suffix, pos, include=False)
         else:
             dirs = (Utils.find_root_package_dir(file_desc.filename),) + dirs
 
+    # search for dotted filename e.g. <dir>/foo.bar.pxd
     dotted_filename = qualified_name
     if suffix:
         dotted_filename += suffix
 
+    for dirname in dirs:
+        path = os.path.join(dirname, dotted_filename)
+        if os.path.exists(path):
+            return path
+
+    # search for filename in package structure e.g. <dir>/foo/bar.pxd or <dir>/foo/bar/__init__.pxd
     if not include:
+
         names = qualified_name.split('.')
         package_names = tuple(names[:-1])
         module_name = names[-1]
         module_filename = module_name + suffix
         package_filename = "__init__" + suffix
 
-    for dirname in dirs:
-        path = os.path.join(dirname, dotted_filename)
-        if os.path.exists(path):
-            return path
-
-        if not include:
-            package_dir = Utils.check_package_dir(dirname, package_names)
+        # search for standard packages first - PEP420
+        namespace_dirs = []
+        for dirname in dirs:
+            package_dir, is_namespace = Utils.check_package_dir(dirname, package_names)
             if package_dir is not None:
+
+                if is_namespace:
+                    namespace_dirs.append(package_dir)
+                    continue
+
+                # matches modules of the form: <dir>/foo/bar.pxd
                 path = os.path.join(package_dir, module_filename)
                 if os.path.exists(path):
                     return path
-                path = os.path.join(package_dir, module_name,
-                                    package_filename)
+
+                # matches modules of the form: <dir>/foo/bar/__init__.pxd
+                path = os.path.join(package_dir, module_name, package_filename)
                 if os.path.exists(path):
                     return path
+
+        # search for namespaces second - PEP420
+        for package_dir in namespace_dirs:
+
+            # matches modules of the form: <dir>/foo/bar.pxd
+            path = os.path.join(package_dir, module_filename)
+            if os.path.exists(path):
+                return path
+
+            # matches modules of the form: <dir>/foo/bar/__init__.pxd
+            path = os.path.join(package_dir, module_name, package_filename)
+            if os.path.exists(path):
+                return path
+
     return None
 
 
diff --git a/Cython/Utils.py b/Cython/Utils.py
index 69563794c..77a48fbd7 100644
--- a/Cython/Utils.py
+++ b/Cython/Utils.py
@@ -135,15 +135,19 @@ def find_root_package_dir(file_path):
         return dir
 
 @cached_function
-def check_package_dir(dir, package_names):
+def check_package_dir(dir_path, package_names):
+    namespace = True
     for dirname in package_names:
-        dir = os.path.join(dir, dirname)
-        if not is_package_dir(dir):
-            return None
-    return dir
+        dir_path = os.path.join(dir_path, dirname)
+        has_init = contains_init(dir_path)
+        if not namespace and not has_init:
+            return None, False
+        elif has_init:
+            namespace = False
+    return dir_path, namespace
 
 @cached_function
-def is_package_dir(dir_path):
+def contains_init(dir_path):
     for filename in ("__init__.py",
                      "__init__.pyc",
                      "__init__.pyx",
@@ -152,6 +156,12 @@ def is_package_dir(dir_path):
         if path_exists(path):
             return 1
 
+
+def is_package_dir(dir_path):
+    if contains_init(dir_path):
+        return 1
+
+
 @cached_function
 def path_exists(path):
     # try on the filesystem first
diff --git a/runtests.py b/runtests.py
index 91a0dd257..7d0446384 100755
--- a/runtests.py
+++ b/runtests.py
@@ -415,6 +415,7 @@ VER_DEP_MODULES = {
                                         'run.special_methods_T561_py2'
                                         ]),
     (3,3) : (operator.lt, lambda x: x in ['build.package_compilation',
+                                          'build.cythonize_pep420_namespace',
                                           'run.yield_from_py33',
                                           'pyximport.pyximport_namespace',
                                           ]),
diff --git a/tests/build/cythonize_pep420_namespace.srctree b/tests/build/cythonize_pep420_namespace.srctree
new file mode 100644
index 000000000..6a031e417
--- /dev/null
+++ b/tests/build/cythonize_pep420_namespace.srctree
@@ -0,0 +1,44 @@
+PYTHON setup.py build_ext --inplace
+PYTHON -c "import runner"
+
+######## setup.py ########
+
+from Cython.Build.Dependencies import cythonize
+
+from distutils.core import setup, Extension
+
+setup(
+  ext_modules=cythonize([
+    Extension("nsp.m1.a", ["nsp/m1/a.pyx"]),
+    Extension("nsp.m2.b", ["nsp/m2/b.pyx"])
+  ]),
+)
+
+######## nsp/m1/__init__.py ########
+
+######## nsp/m1/a.pyx ########
+
+cdef class A:
+    pass
+
+######## nsp/m1/a.pxd ########
+
+cdef class A:
+    pass
+
+######## nsp/m2/__init__.py ########
+
+######## nsp/m2/b.pyx ########
+
+from nsp.m1.a cimport A
+
+cdef class B(A):
+    pass
+
+######## runner.py ########
+
+from nsp.m1.a import A
+from nsp.m2.b import B
+
+a = A()
+b = B()
-- 
2.37.1 (Apple Git-137.1)

